A = eye(1);
B = eye(2);
C = zeros(1);

if (str(A.shape[0]) + ',' + str(A.shape[1]) + ',' + str(B.shape[1])) in self.factorizations:
    return self.alphatensor(A, B)
elif A.shape[0] == 1:
    return np.array([[Num(A[0, 0] * B[0, 0])]], dtype=Num)
else:
    A11, A12, A21, A22 = self.matrix_partition_sq2(A)
    B11, B12, B21, B22 = self.matrix_partition_sq2(B)
    P1 = self.alpha_strassen_wrap(A11 + A22, B11 + B22)
    P2 = self.alpha_strassen_wrap(A21 + A22, B11)
    P3 = self.alpha_strassen_wrap(A11, B12 - B22)
    P4 = self.alpha_strassen_wrap(A22, B21 - B11)
    P5 = self.alpha_strassen_wrap(A11 + A12, B22)
    P6 = self.alpha_strassen_wrap(A21 - A11, B11 + B12)
    P7 = self.alpha_strassen_wrap(A12 - A22, B21 + B22)

    C = self.matrix_repartition_sq2(P1 + P4 - P5 + P7, P3 + P5,
                                    P2 + P4, P1 - P2 + P3 + P6)

return C
